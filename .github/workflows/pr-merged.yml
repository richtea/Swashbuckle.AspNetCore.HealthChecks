name: '[autorelease] On PR merged'

on:
  pull_request:
    branches:
    - main
    types: [closed]
  workflow_dispatch:    # Allow running the workflow manually from the GitHub UI

jobs:
  init:
    runs-on: ubuntu-latest
    # Check this event is a merge of an autorelease PR
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'autorelease')
    outputs:
      build-version: ${{ steps.get-release-info.outputs.release-version }}
      is-prerelease: '${{ steps.semver_parser.outputs.prerelease && true || false }}'
      release-notes: '${{ steps.get-release-info.outputs.release-notes }}'
    steps:
    - uses: actions/checkout@v3

    - name: Get latest release info
      id: get-release-info
      uses: release-flow/keep-a-changelog-action/get-release-info@v1
      with:
        release-version: latest

    - name: Display release notes
      run: |
        echo "${{ steps.get-release-info.outputs.release-notes }}"

    - name: Parse current version number
      uses: madhead/semver-utils@latest
      id: semver_parser
      with:
        # The PR we are merging should have updated the changelog to set the target release version as the
        # latest version (this happens in prepare-release.yml)
        version: ${{ steps.get-release-info.outputs.release-version }}

  build:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'autorelease')
    needs: init
    uses: ./.github/workflows/build-and-test.yml
    with:
      build-version: ${{ needs.init.outputs.build-version }}

  create_release:
    needs: 
    - init
    - build
    runs-on: ubuntu-latest
    # Check this event is a merge of an autorelease PR
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'autorelease')
    env:
      ARTIFACT_PATH: ${{ github.workspace }}/artifacts
    steps:

    # We need to create a token
    # a) To have the GH release appear to be generated by our app instead of github-actions (cosmetic)
    # b) So we can use the same mechanism to get a token when running locally under act
    - uses: tibdex/github-app-token@v1
      id: generate-token
      with:
        app_id: ${{ secrets.RELEASEBOT_APP_ID }}
        private_key: ${{ secrets.RELEASEBOT_PRIVATE_KEY }}
        github_api_url: ${{ github.api_url && github.api_url || 'https://api.github.com' }}

    - name: Download nupkg artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.nupkg-artifact }}
        path: ${{ env.ARTIFACT_PATH }}

    - name: Create draft release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: '${{ needs.init.outputs.build-version }}'
        tag_name: 'v${{ needs.init.outputs.build-version }}'
        body: ${{ needs.init.outputs.release-notes }}
        files: '${{ env.ARTIFACT_PATH }}/*'
        target_commitish: '${{ github.base_ref }}'
        draft: true
        prerelease: ${{ needs.init.outputs.is-prerelease }}
        token: ${{ steps.generate-token.outputs.token }}
        fail_on_unmatched_files: true

    - name: Display instructions
      run: |
        echo "::notice title=Draft Release Prepared::A draft release has been prepared for you to approve: ${{ steps.create_release.outputs.url }}"
  